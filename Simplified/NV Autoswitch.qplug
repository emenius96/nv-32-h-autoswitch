-- Information block for the plugin
PluginInfo = {
    Name = "NV Autoswitch",
    Version = "1.0",
    BuildVersion = "1.0.0.0",
    Id = "30ce66f5-de8c-4e21-92ba-4cab4a6bfced",
    Author = "Jasper Murrell",
    Description = "Simple NV series autoswitch module that has memory of previously selected sources"
  }

-- Define the color of the plugin object in the design
function GetColor(props)
    return { 204, 204, 204 }
end
  
-- The name that will initially display when dragged into a design
function GetPrettyName(props)
    return "NV Autoswitch v" .. PluginInfo.Version
end
  
-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {
      {
        Name = "Sources",
        Type = "integer",
        Min = 2,
        Max = 64,
        Value = 4
      }
    }
    return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {
    {
      Name = "on",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = false
    },
    {
      Name = "active",
      Count = props['Sources'].Value,
      ControlType = "Indicator",
      IndicatorType = "LED",
      PinStyle = "Input",
      UserPin = true
    },
    {
      Name = "select",
      Count= props['Sources'].Value,
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Output",
      UserPin = true
    },
    {
      Name = "idle",
      ControlType = "Indicator",
      IndicatorType= "LED",
      PinStyle = "Output",
      UserPin = true
    },
    {
      Name = "delay",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = 0,
      Max = 1
    }

  }
  return ctrls
end

-- Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
    local layout = {
      ['on'] = {
        Position = {107,60},
        Size = {36,16}
      },
      ['active'] = {
        Position = {70,116},
        Size = {16,16}
      },
      ['select'] = {
        Position = {160,116},
        Size = {36,16}
      },
      ['idle'] = {
        Position = {117,209},
        Size = {16,16}
      },
      ['delay'] = {
        Position = {107,258},
        Size = {36,16}
      }
    };
    local graphics = {
      {
        Type = 'Label',
        Text = 'NV Series Autoswitch',
        TextSize = 12,
        HTextAlign = 'Center',
        VTextAlign = 'Center',
        Size = {250,30},
        Color = {51, 51, 51},
        Position = {0,0}
      },
      {
        Type = 'Label',
        Text = 'On/Off',
        TextSize = 10,
        HTextAlign = 'Center',
        VTextAlign = 'Center',
        Size = {200,20},
        Color = {51, 51, 51},
        Position = {25,40}
      },
      {
        Type = 'Label',
        Text = 'Active',
        TextSize = 10,
        HTextAlign = 'Center',
        VTextAlign = 'Center',
        Size = {100,16},
        Color = {51, 51, 51},
        Position = {25,95}
      },
      {
        Type = 'Label',
        Text = 'Select',
        TextSize = 10,
        HTextAlign = 'Center',
        VTextAlign = 'Center',
        Size = {100,16},
        Color = {51, 51, 51},
        Position = {125,95}
      },
      {
        Type = 'Label',
        Text = 'Idle',
        TextSize = 10,
        HTextAlign = 'Center',
        VTextAlign = 'Center',
        Size = {200,16},
        Color = {51, 51, 51},
        Position = {25,(16*props['Sources'].Value)+120}
      },
      {
        Type = 'Label',
        Text = 'Switch Delay',
        TextSize = 10,
        HTextAlign = 'Center',
        VTextAlign = 'Center',
        Size = {200,16},
        Color = {51, 51, 51},
        Position = {25,(16*props['Sources'].Value)+170}
      }
    };
  
  
    for i = 1, props['Sources'].Value do 
      layout['on'] = {
        Position = {107,60},
        Size = {36,16}
      }
      layout['active '..i] = {
        Position = {70, (116-16)+(i*16)},
        Size = {16,16},
      }
      layout['select '..i] = {
        Position = {160, (116-16)+(i*16)},
        Size = {36,16},
      }
      layout['idle'] = {
        Position = {117, (16*props['Sources'].Value)+140}
      }
      layout['delay'] = {
        Position = {107, (16*props['Sources'].Value)+190}
      }
    end
  
    return layout, graphics
  end


--Start event based logic
if Controls then
  function tablePrint(t)
    print("\nHistory:")
    for i,v in pairs(t) do
      print(i,v)  
    end
  end
        
  function indexLookup(t,x)
    for i,v in pairs(t) do
      if v == x then return(i) end
    end
  end
        
  function add(n)
    print("add", n)   
    local existingPos = indexLookup(history,n)
    if existingPos then
      table.remove(history, existingPos)
    end    
    table.insert(history, 1,  n)
    if #history > 0 then
      switch(history[1])
    end
  end
        
  function remove(n)
    print("remove",n)
    table.remove(history, indexLookup(history,n))
    switch(history[1])
    Controls.select[n].IsDisabled = true
  end
        
  function switch(n)
    delay = Controls.delay.Value
    Timer.CallAfter(function()
      print("SWITCH:",n)
        for i,ctrl in pairs(Controls.select) do
          ctrl.Boolean = (n==i)
        end
        Controls.idle.Boolean = (n == nil)
    end , delay)
  end
        
  function init()
    history = {}
    for i,Active in pairs(Controls.active) do
      if Active.Boolean then add(i) end
        Controls.select[i].IsDisabled = not Active.Boolean
      end
    tablePrint(history)
  end
  
  function checkActive()
    local count = 0
    for i,active in pairs(Controls.active) do
      if active.Boolean then
        count = count + 1
      end
    end
    return count
  end 
        
  for i,active in pairs(Controls.active) do
    active.EventHandler = function()
    Controls.select[i].IsDisabled = not active.Boolean 
    if Controls.on.Boolean then
      if active.Boolean then
        add(i)
      else
        remove(i)
      end
      tablePrint(history)
    end
    if not active.Boolean then 
      Controls.select[i].Boolean = false 
    end 
    if checkActive() == 0 then 
      for i,ctrl in pairs(Controls.select) do
        ctrl.Boolean = false 
      end
    end 
  end
  end
        
  for i,ctrl in pairs(Controls.select) do
    ctrl.EventHandler = function()
      if Controls.on.Boolean then add(i) else switch(i) end;
    end
  end
  
  Controls.on.EventHandler = function(ctrl)
    if not ctrl.Boolean then Controls.idle.Boolean = false 
    else if checkActive() == 0 then 
        Controls.idle.Boolean = true 
      end 
    end 
  end 
        
  init()
end